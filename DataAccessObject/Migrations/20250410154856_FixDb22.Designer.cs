// <auto-generated />
using System;
using DataAccessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObject.Migrations
{
    [DbContext(typeof(GreenRoamContext))]
    [Migration("20250410154856_FixDb22")]
    partial class FixDb22
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Model.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("ReportID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<double>("TotalRentPrice")
                        .HasColumnType("float");

                    b.Property<double>("bookingDeposit")
                        .HasColumnType("float");

                    b.Property<int>("numberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("numberOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("paymentStatus")
                        .HasColumnType("int");

                    b.Property<double>("remainingBalance")
                        .HasColumnType("float");

                    b.HasKey("BookingID");

                    b.HasIndex("AccountID");

                    b.HasIndex("HomeStayID");

                    b.HasIndex("ReportID")
                        .IsUnique()
                        .HasFilter("[ReportID] IS NOT NULL");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingDetail", b =>
                {
                    b.Property<int>("BookingDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingDetailID"));

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeStayRentalID")
                        .HasColumnType("int");

                    b.Property<int?>("RoomID")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<double>("rentPrice")
                        .HasColumnType("float");

                    b.HasKey("BookingDetailID");

                    b.HasIndex("BookingID");

                    b.HasIndex("HomeStayRentalID");

                    b.HasIndex("RoomID");

                    b.ToTable("BookingDetails");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingServices", b =>
                {
                    b.Property<int>("BookingServicesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingServicesID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingServicesDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentServiceStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentServicesMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<double>("bookingServiceDeposit")
                        .HasColumnType("float");

                    b.Property<double>("remainingBalance")
                        .HasColumnType("float");

                    b.HasKey("BookingServicesID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BookingID");

                    b.HasIndex("HomeStayID");

                    b.ToTable("BookingServices");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingServicesDetail", b =>
                {
                    b.Property<int>("BookingServicesDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingServicesDetailID"));

                    b.Property<int?>("BookingServicesID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ServicesID")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double>("unitPrice")
                        .HasColumnType("float");

                    b.HasKey("BookingServicesDetailID");

                    b.HasIndex("BookingServicesID");

                    b.HasIndex("ServicesID");

                    b.ToTable("BookingServicesDetails");
                });

            modelBuilder.Entity("BusinessObject.Model.CancellationPolicy", b =>
                {
                    b.Property<int>("CancellationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CancellationID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayBeforeCancel")
                        .HasColumnType("int");

                    b.Property<int>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<double>("RefundPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CancellationID");

                    b.HasIndex("HomeStayID")
                        .IsUnique();

                    b.ToTable("CancelPolicy");
                });

            modelBuilder.Entity("BusinessObject.Model.CommissionRate", b =>
                {
                    b.Property<int>("CommissionRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommissionRateID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("HostShare")
                        .HasColumnType("float");

                    b.Property<double>("PlatformShare")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CommissionRateID");

                    b.ToTable("CommissionRates");
                });

            modelBuilder.Entity("BusinessObject.Model.Conversation", b =>
                {
                    b.Property<int>("ConversationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<string>("User1ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("User2ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConversationID");

                    b.HasIndex("HomeStayID");

                    b.HasIndex("User1ID");

                    b.HasIndex("User2ID");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("BusinessObject.Model.CultureExperience", b =>
                {
                    b.Property<int>("CultureExperienceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CultureExperienceID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CultureType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CultureExperienceID");

                    b.HasIndex("AccountID");

                    b.HasIndex("HomeStayID");

                    b.ToTable("CultureExperiences");
                });

            modelBuilder.Entity("BusinessObject.Model.HomeStay", b =>
                {
                    b.Property<int>("HomeStayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeStayID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CancellationID")
                        .HasColumnType("int");

                    b.Property<int?>("CommissionRateID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfRental")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HomeStayID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CommissionRateID");

                    b.ToTable("HomeStays");
                });

            modelBuilder.Entity("BusinessObject.Model.HomeStayRentals", b =>
                {
                    b.Property<int>("HomeStayRentalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeStayRentalID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<int>("MaxAdults")
                        .HasColumnType("int");

                    b.Property<int>("MaxChildren")
                        .HasColumnType("int");

                    b.Property<int>("MaxPeople")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RentWhole")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("numberBathRoom")
                        .HasColumnType("int");

                    b.Property<int>("numberBedRoom")
                        .HasColumnType("int");

                    b.Property<int>("numberKitchen")
                        .HasColumnType("int");

                    b.Property<int>("numberWifi")
                        .HasColumnType("int");

                    b.HasKey("HomeStayRentalID");

                    b.HasIndex("HomeStayID");

                    b.ToTable("HomeStayRentals");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageCultureExperience", b =>
                {
                    b.Property<int>("ImageCultureExperiencesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageCultureExperiencesID"));

                    b.Property<int?>("CultureExperienceID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageCultureExperiencesID");

                    b.HasIndex("CultureExperienceID");

                    b.ToTable("ImageCultureExperiences");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageHomeStay", b =>
                {
                    b.Property<int>("ImageHomeStayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageHomeStayID"));

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageHomeStayID");

                    b.HasIndex("HomeStayID");

                    b.ToTable("ImageHomeStays");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageHomeStayRentals", b =>
                {
                    b.Property<int>("ImageHomeStayRentalsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageHomeStayRentalsID"));

                    b.Property<int?>("HomeStayRentalID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageHomeStayRentalsID");

                    b.HasIndex("HomeStayRentalID");

                    b.ToTable("ImageHomeStayRentals");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageRoomTypes", b =>
                {
                    b.Property<int>("ImageRoomTypesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageRoomTypesID"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomTypesID")
                        .HasColumnType("int");

                    b.HasKey("ImageRoomTypesID");

                    b.HasIndex("RoomTypesID");

                    b.ToTable("ImageRoomTypes");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageServices", b =>
                {
                    b.Property<int>("ImageServicesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageServicesID"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServicesID")
                        .HasColumnType("int");

                    b.HasKey("ImageServicesID");

                    b.HasIndex("ServicesID");

                    b.ToTable("ImageServices");
                });

            modelBuilder.Entity("BusinessObject.Model.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("SenderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("receiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("senderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageID");

                    b.HasIndex("AccountId");

                    b.HasIndex("ConversationID");

                    b.HasIndex("SenderID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BusinessObject.Model.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<int?>("BookingServicesID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeNotify")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BookingID");

                    b.HasIndex("BookingServicesID");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.Pricing", b =>
                {
                    b.Property<int>("PricingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PricingID"));

                    b.Property<int>("DayType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeStayRentalID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<double>("RentPrice")
                        .HasColumnType("float");

                    b.Property<int?>("RoomTypesID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("PricingID");

                    b.HasIndex("HomeStayRentalID");

                    b.HasIndex("RoomTypesID");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("BusinessObject.Model.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RatingID");

                    b.HasIndex("AccountID");

                    b.HasIndex("HomeStayID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("BusinessObject.Model.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountID");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("BusinessObject.Model.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportID");

                    b.HasIndex("AccountID");

                    b.HasIndex("HomeStayID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BusinessObject.Model.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ReviewID");

                    b.HasIndex("AccountID");

                    b.HasIndex("HomeStayID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BusinessObject.Model.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomID"));

                    b.Property<int?>("RoomTypesID")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isUsed")
                        .HasColumnType("bit");

                    b.Property<string>("roomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomID");

                    b.HasIndex("RoomTypesID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("BusinessObject.Model.RoomTypes", b =>
                {
                    b.Property<int>("RoomTypesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomTypesID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeStayRentalID")
                        .HasColumnType("int");

                    b.Property<int>("MaxAdults")
                        .HasColumnType("int");

                    b.Property<int>("MaxChildren")
                        .HasColumnType("int");

                    b.Property<int>("MaxPeople")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("numberBathRoom")
                        .HasColumnType("int");

                    b.Property<int>("numberBedRoom")
                        .HasColumnType("int");

                    b.Property<int>("numberWifi")
                        .HasColumnType("int");

                    b.HasKey("RoomTypesID");

                    b.HasIndex("HomeStayRentalID");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("BusinessObject.Model.Services", b =>
                {
                    b.Property<int>("ServicesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicesID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("servicesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("servicesPrice")
                        .HasColumnType("float");

                    b.HasKey("ServicesID");

                    b.HasIndex("HomeStayID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("BusinessObject.Model.Transaction", b =>
                {
                    b.Property<string>("ResponseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankTranNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<int?>("BookingServicesID")
                        .HasColumnType("int");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecureHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TmnCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TxnRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponseId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BookingID");

                    b.HasIndex("BookingServicesID");

                    b.HasIndex("HomeStayID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a7d27115-e9a8-4136-b28f-5a1dcc35220a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ba66768a-3a13-43d1-956b-a55b4aa36fc8",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "354615ec-da93-4217-9147-be8ca6b5d766",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "ce80d188-0f20-4be6-8828-8353a7c815a3",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.Booking", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("Bookings")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("Bookings")
                        .HasForeignKey("HomeStayID");

                    b.HasOne("BusinessObject.Model.Report", "Report")
                        .WithOne("Booking")
                        .HasForeignKey("BusinessObject.Model.Booking", "ReportID");

                    b.Navigation("Account");

                    b.Navigation("HomeStay");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingDetail", b =>
                {
                    b.HasOne("BusinessObject.Model.Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingID");

                    b.HasOne("BusinessObject.Model.HomeStayRentals", "HomeStayRentals")
                        .WithMany("BookingDetails")
                        .HasForeignKey("HomeStayRentalID");

                    b.HasOne("BusinessObject.Model.Room", "Rooms")
                        .WithMany("BookingDetails")
                        .HasForeignKey("RoomID");

                    b.Navigation("Booking");

                    b.Navigation("HomeStayRentals");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingServices", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("BookingServices")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Booking", "Booking")
                        .WithMany("BookingServices")
                        .HasForeignKey("BookingID");

                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("BookingServices")
                        .HasForeignKey("HomeStayID");

                    b.Navigation("Account");

                    b.Navigation("Booking");

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingServicesDetail", b =>
                {
                    b.HasOne("BusinessObject.Model.BookingServices", "BookingService")
                        .WithMany("BookingServicesDetails")
                        .HasForeignKey("BookingServicesID");

                    b.HasOne("BusinessObject.Model.Services", "Services")
                        .WithMany("BookingServicesDetails")
                        .HasForeignKey("ServicesID");

                    b.Navigation("BookingService");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessObject.Model.CancellationPolicy", b =>
                {
                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithOne("CancelPolicy")
                        .HasForeignKey("BusinessObject.Model.CancellationPolicy", "HomeStayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("BusinessObject.Model.Conversation", b =>
                {
                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("Conversations")
                        .HasForeignKey("HomeStayID");

                    b.HasOne("BusinessObject.Model.Account", "User1")
                        .WithMany("ConversationsAsUser1")
                        .HasForeignKey("User1ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Account", "User2")
                        .WithMany("ConversationsAsUser2")
                        .HasForeignKey("User2ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HomeStay");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("BusinessObject.Model.CultureExperience", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("CultureExperiences")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("CultureExperiences")
                        .HasForeignKey("HomeStayID");

                    b.Navigation("Account");

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("BusinessObject.Model.HomeStay", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("HomeStays")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.CommissionRate", "CommissionRate")
                        .WithMany("HomeStays")
                        .HasForeignKey("CommissionRateID");

                    b.Navigation("Account");

                    b.Navigation("CommissionRate");
                });

            modelBuilder.Entity("BusinessObject.Model.HomeStayRentals", b =>
                {
                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("HomeStayRentals")
                        .HasForeignKey("HomeStayID");

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageCultureExperience", b =>
                {
                    b.HasOne("BusinessObject.Model.CultureExperience", "CultureExperiences")
                        .WithMany("ImageCultureExperiences")
                        .HasForeignKey("CultureExperienceID");

                    b.Navigation("CultureExperiences");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageHomeStay", b =>
                {
                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("ImageHomeStays")
                        .HasForeignKey("HomeStayID");

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageHomeStayRentals", b =>
                {
                    b.HasOne("BusinessObject.Model.HomeStayRentals", "HomeStayRentals")
                        .WithMany("ImageHomeStayRentals")
                        .HasForeignKey("HomeStayRentalID");

                    b.Navigation("HomeStayRentals");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageRoomTypes", b =>
                {
                    b.HasOne("BusinessObject.Model.RoomTypes", "RoomTypes")
                        .WithMany("ImageRoomTypes")
                        .HasForeignKey("RoomTypesID");

                    b.Navigation("RoomTypes");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageServices", b =>
                {
                    b.HasOne("BusinessObject.Model.Services", "Services")
                        .WithMany("ImageServices")
                        .HasForeignKey("ServicesID");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessObject.Model.Message", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany("Messages")
                        .HasForeignKey("AccountId");

                    b.HasOne("BusinessObject.Model.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BusinessObject.Model.Notification", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Booking", "Booking")
                        .WithMany("Notifications")
                        .HasForeignKey("BookingID");

                    b.HasOne("BusinessObject.Model.BookingServices", "BookingService")
                        .WithMany("Notifications")
                        .HasForeignKey("BookingServicesID");

                    b.Navigation("Account");

                    b.Navigation("Booking");

                    b.Navigation("BookingService");
                });

            modelBuilder.Entity("BusinessObject.Model.Pricing", b =>
                {
                    b.HasOne("BusinessObject.Model.HomeStayRentals", "HomeStayRentals")
                        .WithMany("Prices")
                        .HasForeignKey("HomeStayRentalID");

                    b.HasOne("BusinessObject.Model.RoomTypes", "RoomTypes")
                        .WithMany("Prices")
                        .HasForeignKey("RoomTypesID");

                    b.Navigation("HomeStayRentals");

                    b.Navigation("RoomTypes");
                });

            modelBuilder.Entity("BusinessObject.Model.Rating", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("Ratings")
                        .HasForeignKey("HomeStayID");

                    b.Navigation("Account");

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("BusinessObject.Model.RefreshToken", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Model.Report", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("Reports")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("Reports")
                        .HasForeignKey("HomeStayID");

                    b.Navigation("Account");

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("BusinessObject.Model.Review", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("Reviews")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany()
                        .HasForeignKey("HomeStayID");

                    b.Navigation("Account");

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("BusinessObject.Model.Room", b =>
                {
                    b.HasOne("BusinessObject.Model.RoomTypes", "RoomTypes")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypesID");

                    b.Navigation("RoomTypes");
                });

            modelBuilder.Entity("BusinessObject.Model.RoomTypes", b =>
                {
                    b.HasOne("BusinessObject.Model.HomeStayRentals", "HomeStayRentals")
                        .WithMany("RoomTypes")
                        .HasForeignKey("HomeStayRentalID");

                    b.Navigation("HomeStayRentals");
                });

            modelBuilder.Entity("BusinessObject.Model.Services", b =>
                {
                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("Services")
                        .HasForeignKey("HomeStayID");

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("BusinessObject.Model.Transaction", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId");

                    b.HasOne("BusinessObject.Model.Booking", "Booking")
                        .WithMany("Transactions")
                        .HasForeignKey("BookingID");

                    b.HasOne("BusinessObject.Model.BookingServices", "BookingService")
                        .WithMany("Transactions")
                        .HasForeignKey("BookingServicesID");

                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("Transactions")
                        .HasForeignKey("HomeStayID");

                    b.Navigation("Account");

                    b.Navigation("Booking");

                    b.Navigation("BookingService");

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Model.Account", b =>
                {
                    b.Navigation("BookingServices");

                    b.Navigation("Bookings");

                    b.Navigation("ConversationsAsUser1");

                    b.Navigation("ConversationsAsUser2");

                    b.Navigation("CultureExperiences");

                    b.Navigation("HomeStays");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObject.Model.Booking", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("BookingServices");

                    b.Navigation("Notifications");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingServices", b =>
                {
                    b.Navigation("BookingServicesDetails");

                    b.Navigation("Notifications");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObject.Model.CommissionRate", b =>
                {
                    b.Navigation("HomeStays");
                });

            modelBuilder.Entity("BusinessObject.Model.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("BusinessObject.Model.CultureExperience", b =>
                {
                    b.Navigation("ImageCultureExperiences");
                });

            modelBuilder.Entity("BusinessObject.Model.HomeStay", b =>
                {
                    b.Navigation("BookingServices");

                    b.Navigation("Bookings");

                    b.Navigation("CancelPolicy");

                    b.Navigation("Conversations");

                    b.Navigation("CultureExperiences");

                    b.Navigation("HomeStayRentals");

                    b.Navigation("ImageHomeStays");

                    b.Navigation("Ratings");

                    b.Navigation("Reports");

                    b.Navigation("Services");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObject.Model.HomeStayRentals", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("ImageHomeStayRentals");

                    b.Navigation("Prices");

                    b.Navigation("RoomTypes");
                });

            modelBuilder.Entity("BusinessObject.Model.Report", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BusinessObject.Model.Room", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("BusinessObject.Model.RoomTypes", b =>
                {
                    b.Navigation("ImageRoomTypes");

                    b.Navigation("Prices");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BusinessObject.Model.Services", b =>
                {
                    b.Navigation("BookingServicesDetails");

                    b.Navigation("ImageServices");
                });
#pragma warning restore 612, 618
        }
    }
}
