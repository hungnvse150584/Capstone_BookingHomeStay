// <auto-generated />
using System;
using DataAccessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObject.Migrations
{
    [DbContext(typeof(GreenRoamContext))]
    partial class GreenRoamContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Model.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("ReportID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int>("numberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("numberOfChildren")
                        .HasColumnType("int");

                    b.Property<string>("transactionID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ReportID")
                        .IsUnique()
                        .HasFilter("[ReportID] IS NOT NULL");

                    b.HasIndex("transactionID")
                        .IsUnique()
                        .HasFilter("[transactionID] IS NOT NULL");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingDetail", b =>
                {
                    b.Property<int>("BookingDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingDetailID"));

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeStayTypesID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double>("rentPrice")
                        .HasColumnType("float");

                    b.HasKey("BookingDetailID");

                    b.HasIndex("BookingID");

                    b.HasIndex("HomeStayTypesID");

                    b.ToTable("BookingDetails");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingServices", b =>
                {
                    b.Property<int>("BookingServicesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingServicesID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingServicesDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentServicesMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("transactionID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingServicesID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BookingID");

                    b.HasIndex("transactionID")
                        .IsUnique()
                        .HasFilter("[transactionID] IS NOT NULL");

                    b.ToTable("BookingServices");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingServicesDetail", b =>
                {
                    b.Property<int>("BookingServicesDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingServicesDetailID"));

                    b.Property<int?>("BookingServicesID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ServicesID")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double>("unitPrice")
                        .HasColumnType("float");

                    b.HasKey("BookingServicesDetailID");

                    b.HasIndex("BookingServicesID");

                    b.HasIndex("ServicesID");

                    b.ToTable("BookingServicesDetails");
                });

            modelBuilder.Entity("BusinessObject.Model.District", b =>
                {
                    b.Property<int>("DistrictID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictID"));

                    b.Property<int?>("ProvinceID")
                        .HasColumnType("int");

                    b.Property<string>("districtName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("BusinessObject.Model.HomeStay", b =>
                {
                    b.Property<int>("HomeStayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeStayID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfRental")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HomeStayID");

                    b.HasIndex("AccountID");

                    b.HasIndex("LocationID");

                    b.ToTable("HomeStays");
                });

            modelBuilder.Entity("BusinessObject.Model.HomeStayTypes", b =>
                {
                    b.Property<int>("HomeStayTypesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeStayTypesID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<int>("MaxAdults")
                        .HasColumnType("int");

                    b.Property<int>("MaxChildren")
                        .HasColumnType("int");

                    b.Property<int>("MaxPeople")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.Property<double>("RentPrice")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HomeStayTypesID");

                    b.HasIndex("HomeStayID");

                    b.HasIndex("PropertyID");

                    b.ToTable("HomeStayTypes");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageHomeStayTypes", b =>
                {
                    b.Property<int>("ImageHomeStayTypesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageHomeStayTypesID"));

                    b.Property<int?>("HomeStayTypesID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageHomeStayTypesID");

                    b.HasIndex("HomeStayTypesID");

                    b.ToTable("ImageHomeStayTypes");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageServices", b =>
                {
                    b.Property<int>("ImageServicesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageServicesID"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServicesID")
                        .HasColumnType("int");

                    b.HasKey("ImageServicesID");

                    b.HasIndex("ServicesID");

                    b.ToTable("ImageServices");
                });

            modelBuilder.Entity("BusinessObject.Model.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<string>("Cooordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProvinceID")
                        .HasColumnType("int");

                    b.Property<int?>("StreetID")
                        .HasColumnType("int");

                    b.Property<int?>("WardID")
                        .HasColumnType("int");

                    b.Property<string>("numberHouse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("StreetID");

                    b.HasIndex("WardID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BusinessObject.Model.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<int?>("BookingServicesID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeNotify")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BookingID");

                    b.HasIndex("BookingServicesID");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("BusinessObject.Model.Property", b =>
                {
                    b.Property<int>("PropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("numberBathRoom")
                        .HasColumnType("int");

                    b.Property<int>("numberBedRoom")
                        .HasColumnType("int");

                    b.Property<int>("numberWifi")
                        .HasColumnType("int");

                    b.HasKey("PropertyID");

                    b.HasIndex("AccountID");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("BusinessObject.Model.Province", b =>
                {
                    b.Property<int>("ProvinceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceID"));

                    b.Property<string>("provinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceID");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("BusinessObject.Model.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RatingID");

                    b.HasIndex("AccountID");

                    b.HasIndex("HomeStayID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("BusinessObject.Model.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountID");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("BusinessObject.Model.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportID");

                    b.HasIndex("AccountID");

                    b.HasIndex("HomeStayID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BusinessObject.Model.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ReviewID");

                    b.HasIndex("AccountID");

                    b.HasIndex("HomeStayID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BusinessObject.Model.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomID"));

                    b.Property<int?>("HomeStayTypesID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("roomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomID");

                    b.HasIndex("HomeStayTypesID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("BusinessObject.Model.Services", b =>
                {
                    b.Property<int>("ServicesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicesID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeStayID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("servicesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("servicesPrice")
                        .HasColumnType("float");

                    b.HasKey("ServicesID");

                    b.HasIndex("HomeStayID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("BusinessObject.Model.Street", b =>
                {
                    b.Property<int>("StreetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StreetID"));

                    b.Property<int?>("WardID")
                        .HasColumnType("int");

                    b.Property<string>("streetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StreetID");

                    b.HasIndex("WardID");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("BusinessObject.Model.Transaction", b =>
                {
                    b.Property<string>("ResponseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankTranNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecureHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TmnCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TxnRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponseId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BusinessObject.Model.Ward", b =>
                {
                    b.Property<int>("WardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardID"));

                    b.Property<int?>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("wardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WardID");

                    b.HasIndex("DistrictID");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "19bf5a20-587b-4ccc-92c2-16dbf618660f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d5e8b00f-237d-4d69-928b-544f47f031ce",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "5a96659f-a7d5-41be-b4e4-209ba11a6573",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.Booking", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("Bookings")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Report", "Report")
                        .WithOne("Booking")
                        .HasForeignKey("BusinessObject.Model.Booking", "ReportID");

                    b.HasOne("BusinessObject.Model.Transaction", "Transaction")
                        .WithOne("Booking")
                        .HasForeignKey("BusinessObject.Model.Booking", "transactionID");

                    b.Navigation("Account");

                    b.Navigation("Report");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingDetail", b =>
                {
                    b.HasOne("BusinessObject.Model.Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingID");

                    b.HasOne("BusinessObject.Model.HomeStayTypes", "HomeStayTypes")
                        .WithMany("BookingDetails")
                        .HasForeignKey("HomeStayTypesID");

                    b.Navigation("Booking");

                    b.Navigation("HomeStayTypes");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingServices", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("BookingServices")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Booking", "Booking")
                        .WithMany("BookingServices")
                        .HasForeignKey("BookingID");

                    b.HasOne("BusinessObject.Model.Transaction", "Transaction")
                        .WithOne("BookingService")
                        .HasForeignKey("BusinessObject.Model.BookingServices", "transactionID");

                    b.Navigation("Account");

                    b.Navigation("Booking");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingServicesDetail", b =>
                {
                    b.HasOne("BusinessObject.Model.BookingServices", "BookingService")
                        .WithMany("BookingServicesDetails")
                        .HasForeignKey("BookingServicesID");

                    b.HasOne("BusinessObject.Model.Services", "Services")
                        .WithMany("BookingServicesDetails")
                        .HasForeignKey("ServicesID");

                    b.Navigation("BookingService");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessObject.Model.District", b =>
                {
                    b.HasOne("BusinessObject.Model.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceID");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("BusinessObject.Model.HomeStay", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("HomeStays")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BusinessObject.Model.HomeStayTypes", b =>
                {
                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("HomeStayTypes")
                        .HasForeignKey("HomeStayID");

                    b.HasOne("BusinessObject.Model.Property", "Property")
                        .WithMany("HomeStayTypes")
                        .HasForeignKey("PropertyID");

                    b.Navigation("HomeStay");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageHomeStayTypes", b =>
                {
                    b.HasOne("BusinessObject.Model.HomeStayTypes", "HomeStayTypes")
                        .WithMany("ImageHomeStayTypes")
                        .HasForeignKey("HomeStayTypesID");

                    b.Navigation("HomeStayTypes");
                });

            modelBuilder.Entity("BusinessObject.Model.ImageServices", b =>
                {
                    b.HasOne("BusinessObject.Model.Services", "Services")
                        .WithMany("ImageServices")
                        .HasForeignKey("ServicesID");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessObject.Model.Location", b =>
                {
                    b.HasOne("BusinessObject.Model.District", "District")
                        .WithMany("Locations")
                        .HasForeignKey("DistrictID");

                    b.HasOne("BusinessObject.Model.Province", "Province")
                        .WithMany("Locations")
                        .HasForeignKey("ProvinceID");

                    b.HasOne("BusinessObject.Model.Street", "Street")
                        .WithMany("Locations")
                        .HasForeignKey("StreetID");

                    b.HasOne("BusinessObject.Model.Ward", "Ward")
                        .WithMany("Locations")
                        .HasForeignKey("WardID");

                    b.Navigation("District");

                    b.Navigation("Province");

                    b.Navigation("Street");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("BusinessObject.Model.Notification", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Booking", "Booking")
                        .WithMany("Notifications")
                        .HasForeignKey("BookingID");

                    b.HasOne("BusinessObject.Model.BookingServices", "BookingService")
                        .WithMany("Notifications")
                        .HasForeignKey("BookingServicesID");

                    b.Navigation("Account");

                    b.Navigation("Booking");

                    b.Navigation("BookingService");
                });

            modelBuilder.Entity("BusinessObject.Model.Property", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("Properties")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Model.Rating", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("Ratings")
                        .HasForeignKey("HomeStayID");

                    b.Navigation("Account");

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("BusinessObject.Model.RefreshToken", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Model.Report", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("Reports")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("Reports")
                        .HasForeignKey("HomeStayID");

                    b.Navigation("Account");

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("BusinessObject.Model.Review", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithMany("Reviews")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany()
                        .HasForeignKey("HomeStayID");

                    b.Navigation("Account");

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("BusinessObject.Model.Room", b =>
                {
                    b.HasOne("BusinessObject.Model.HomeStayTypes", "HomeStayTypes")
                        .WithMany("Rooms")
                        .HasForeignKey("HomeStayTypesID");

                    b.Navigation("HomeStayTypes");
                });

            modelBuilder.Entity("BusinessObject.Model.Services", b =>
                {
                    b.HasOne("BusinessObject.Model.HomeStay", "HomeStay")
                        .WithMany("Services")
                        .HasForeignKey("HomeStayID");

                    b.Navigation("HomeStay");
                });

            modelBuilder.Entity("BusinessObject.Model.Street", b =>
                {
                    b.HasOne("BusinessObject.Model.Ward", "Ward")
                        .WithMany("Streets")
                        .HasForeignKey("WardID");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("BusinessObject.Model.Ward", b =>
                {
                    b.HasOne("BusinessObject.Model.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictID");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Model.Account", b =>
                {
                    b.Navigation("BookingServices");

                    b.Navigation("Bookings");

                    b.Navigation("HomeStays");

                    b.Navigation("Notifications");

                    b.Navigation("Properties");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BusinessObject.Model.Booking", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("BookingServices");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("BusinessObject.Model.BookingServices", b =>
                {
                    b.Navigation("BookingServicesDetails");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("BusinessObject.Model.District", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("BusinessObject.Model.HomeStay", b =>
                {
                    b.Navigation("HomeStayTypes");

                    b.Navigation("Ratings");

                    b.Navigation("Reports");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessObject.Model.HomeStayTypes", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("ImageHomeStayTypes");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BusinessObject.Model.Property", b =>
                {
                    b.Navigation("HomeStayTypes");
                });

            modelBuilder.Entity("BusinessObject.Model.Province", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("BusinessObject.Model.Report", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BusinessObject.Model.Services", b =>
                {
                    b.Navigation("BookingServicesDetails");

                    b.Navigation("ImageServices");
                });

            modelBuilder.Entity("BusinessObject.Model.Street", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("BusinessObject.Model.Transaction", b =>
                {
                    b.Navigation("Booking");

                    b.Navigation("BookingService");
                });

            modelBuilder.Entity("BusinessObject.Model.Ward", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Streets");
                });
#pragma warning restore 612, 618
        }
    }
}
